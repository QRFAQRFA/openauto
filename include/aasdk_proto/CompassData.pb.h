// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CompassData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CompassData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CompassData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CompassData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CompassData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CompassData_2eproto;
namespace f1x {
namespace aasdk {
namespace proto {
namespace data {
class Compass;
struct CompassDefaultTypeInternal;
extern CompassDefaultTypeInternal _Compass_default_instance_;
}  // namespace data
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x
PROTOBUF_NAMESPACE_OPEN
template<> ::f1x::aasdk::proto::data::Compass* Arena::CreateMaybeMessage<::f1x::aasdk::proto::data::Compass>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace f1x {
namespace aasdk {
namespace proto {
namespace data {

// ===================================================================

class Compass final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:f1x.aasdk.proto.data.Compass) */ {
 public:
  inline Compass() : Compass(nullptr) {}
  ~Compass() override;
  explicit constexpr Compass(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Compass(const Compass& from);
  Compass(Compass&& from) noexcept
    : Compass() {
    *this = ::std::move(from);
  }

  inline Compass& operator=(const Compass& from) {
    CopyFrom(from);
    return *this;
  }
  inline Compass& operator=(Compass&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Compass& default_instance() {
    return *internal_default_instance();
  }
  static inline const Compass* internal_default_instance() {
    return reinterpret_cast<const Compass*>(
               &_Compass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Compass& a, Compass& b) {
    a.Swap(&b);
  }
  inline void Swap(Compass* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Compass* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Compass* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Compass>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Compass& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Compass& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Compass* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "f1x.aasdk.proto.data.Compass";
  }
  protected:
  explicit Compass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBearingFieldNumber = 1,
    kPitchFieldNumber = 2,
    kRollFieldNumber = 3,
  };
  // required int32 bearing = 1;
  bool has_bearing() const;
  private:
  bool _internal_has_bearing() const;
  public:
  void clear_bearing();
  int32_t bearing() const;
  void set_bearing(int32_t value);
  private:
  int32_t _internal_bearing() const;
  void _internal_set_bearing(int32_t value);
  public:

  // required int32 pitch = 2;
  bool has_pitch() const;
  private:
  bool _internal_has_pitch() const;
  public:
  void clear_pitch();
  int32_t pitch() const;
  void set_pitch(int32_t value);
  private:
  int32_t _internal_pitch() const;
  void _internal_set_pitch(int32_t value);
  public:

  // required int32 roll = 3;
  bool has_roll() const;
  private:
  bool _internal_has_roll() const;
  public:
  void clear_roll();
  int32_t roll() const;
  void set_roll(int32_t value);
  private:
  int32_t _internal_roll() const;
  void _internal_set_roll(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:f1x.aasdk.proto.data.Compass)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t bearing_;
  int32_t pitch_;
  int32_t roll_;
  friend struct ::TableStruct_CompassData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Compass

// required int32 bearing = 1;
inline bool Compass::_internal_has_bearing() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Compass::has_bearing() const {
  return _internal_has_bearing();
}
inline void Compass::clear_bearing() {
  bearing_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t Compass::_internal_bearing() const {
  return bearing_;
}
inline int32_t Compass::bearing() const {
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.data.Compass.bearing)
  return _internal_bearing();
}
inline void Compass::_internal_set_bearing(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  bearing_ = value;
}
inline void Compass::set_bearing(int32_t value) {
  _internal_set_bearing(value);
  // @@protoc_insertion_point(field_set:f1x.aasdk.proto.data.Compass.bearing)
}

// required int32 pitch = 2;
inline bool Compass::_internal_has_pitch() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Compass::has_pitch() const {
  return _internal_has_pitch();
}
inline void Compass::clear_pitch() {
  pitch_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t Compass::_internal_pitch() const {
  return pitch_;
}
inline int32_t Compass::pitch() const {
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.data.Compass.pitch)
  return _internal_pitch();
}
inline void Compass::_internal_set_pitch(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  pitch_ = value;
}
inline void Compass::set_pitch(int32_t value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:f1x.aasdk.proto.data.Compass.pitch)
}

// required int32 roll = 3;
inline bool Compass::_internal_has_roll() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Compass::has_roll() const {
  return _internal_has_roll();
}
inline void Compass::clear_roll() {
  roll_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t Compass::_internal_roll() const {
  return roll_;
}
inline int32_t Compass::roll() const {
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.data.Compass.roll)
  return _internal_roll();
}
inline void Compass::_internal_set_roll(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  roll_ = value;
}
inline void Compass::set_roll(int32_t value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:f1x.aasdk.proto.data.Compass.roll)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CompassData_2eproto
