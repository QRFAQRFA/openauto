// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SensorTypeEnum.proto

#include "SensorTypeEnum.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace f1x {
namespace aasdk {
namespace proto {
namespace enums {
constexpr SensorType::SensorType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SensorTypeDefaultTypeInternal {
  constexpr SensorTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SensorTypeDefaultTypeInternal() {}
  union {
    SensorType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SensorTypeDefaultTypeInternal _SensorType_default_instance_;
}  // namespace enums
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_SensorTypeEnum_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_SensorTypeEnum_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_SensorTypeEnum_2eproto = nullptr;

const uint32_t TableStruct_SensorTypeEnum_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::enums::SensorType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::f1x::aasdk::proto::enums::SensorType)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::f1x::aasdk::proto::enums::_SensorType_default_instance_),
};

const char descriptor_table_protodef_SensorTypeEnum_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024SensorTypeEnum.proto\022\025f1x.aasdk.proto."
  "enums\"\274\002\n\nSensorType\"\255\002\n\004Enum\022\010\n\004NONE\020\000\022"
  "\014\n\010LOCATION\020\001\022\013\n\007COMPASS\020\002\022\r\n\tCAR_SPEED\020"
  "\003\022\007\n\003RPM\020\004\022\014\n\010ODOMETER\020\005\022\016\n\nFUEL_LEVEL\020\006"
  "\022\021\n\rPARKING_BRAKE\020\007\022\010\n\004GEAR\020\010\022\017\n\013DIAGNOS"
  "TICS\020\t\022\016\n\nNIGHT_DATA\020\n\022\017\n\013ENVIRONMENT\020\013\022"
  "\010\n\004HVAC\020\014\022\022\n\016DRIVING_STATUS\020\r\022\021\n\rDEAD_RE"
  "CONING\020\016\022\r\n\tPASSENGER\020\017\022\010\n\004DOOR\020\020\022\t\n\005LIG"
  "HT\020\021\022\010\n\004TIRE\020\022\022\t\n\005ACCEL\020\023\022\010\n\004GYRO\020\024\022\007\n\003G"
  "PS\020\025"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_SensorTypeEnum_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SensorTypeEnum_2eproto = {
  false, false, 364, descriptor_table_protodef_SensorTypeEnum_2eproto, "SensorTypeEnum.proto", 
  &descriptor_table_SensorTypeEnum_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_SensorTypeEnum_2eproto::offsets,
  file_level_metadata_SensorTypeEnum_2eproto, file_level_enum_descriptors_SensorTypeEnum_2eproto, file_level_service_descriptors_SensorTypeEnum_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_SensorTypeEnum_2eproto_getter() {
  return &descriptor_table_SensorTypeEnum_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_SensorTypeEnum_2eproto(&descriptor_table_SensorTypeEnum_2eproto);
namespace f1x {
namespace aasdk {
namespace proto {
namespace enums {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorType_Enum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SensorTypeEnum_2eproto);
  return file_level_enum_descriptors_SensorTypeEnum_2eproto[0];
}
bool SensorType_Enum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SensorType_Enum SensorType::NONE;
constexpr SensorType_Enum SensorType::LOCATION;
constexpr SensorType_Enum SensorType::COMPASS;
constexpr SensorType_Enum SensorType::CAR_SPEED;
constexpr SensorType_Enum SensorType::RPM;
constexpr SensorType_Enum SensorType::ODOMETER;
constexpr SensorType_Enum SensorType::FUEL_LEVEL;
constexpr SensorType_Enum SensorType::PARKING_BRAKE;
constexpr SensorType_Enum SensorType::GEAR;
constexpr SensorType_Enum SensorType::DIAGNOSTICS;
constexpr SensorType_Enum SensorType::NIGHT_DATA;
constexpr SensorType_Enum SensorType::ENVIRONMENT;
constexpr SensorType_Enum SensorType::HVAC;
constexpr SensorType_Enum SensorType::DRIVING_STATUS;
constexpr SensorType_Enum SensorType::DEAD_RECONING;
constexpr SensorType_Enum SensorType::PASSENGER;
constexpr SensorType_Enum SensorType::DOOR;
constexpr SensorType_Enum SensorType::LIGHT;
constexpr SensorType_Enum SensorType::TIRE;
constexpr SensorType_Enum SensorType::ACCEL;
constexpr SensorType_Enum SensorType::GYRO;
constexpr SensorType_Enum SensorType::GPS;
constexpr SensorType_Enum SensorType::Enum_MIN;
constexpr SensorType_Enum SensorType::Enum_MAX;
constexpr int SensorType::Enum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SensorType::_Internal {
 public:
};

SensorType::SensorType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:f1x.aasdk.proto.enums.SensorType)
}
SensorType::SensorType(const SensorType& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:f1x.aasdk.proto.enums.SensorType)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorType::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SensorType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_SensorTypeEnum_2eproto_getter, &descriptor_table_SensorTypeEnum_2eproto_once,
      file_level_metadata_SensorTypeEnum_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace enums
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::f1x::aasdk::proto::enums::SensorType* Arena::CreateMaybeMessage< ::f1x::aasdk::proto::enums::SensorType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::f1x::aasdk::proto::enums::SensorType >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
