// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServiceDiscoveryResponseMessage.proto

#include "ServiceDiscoveryResponseMessage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace f1x {
namespace aasdk {
namespace proto {
namespace messages {
constexpr ServiceDiscoveryResponse::ServiceDiscoveryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channels_()
  , head_unit_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , car_model_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , car_year_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , car_serial_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , headunit_manufacturer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , headunit_model_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sw_build_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sw_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , left_hand_drive_vehicle_(false)
  , can_play_native_media_during_vr_(false)
  , hide_clock_(false){}
struct ServiceDiscoveryResponseDefaultTypeInternal {
  constexpr ServiceDiscoveryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServiceDiscoveryResponseDefaultTypeInternal() {}
  union {
    ServiceDiscoveryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServiceDiscoveryResponseDefaultTypeInternal _ServiceDiscoveryResponse_default_instance_;
}  // namespace messages
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ServiceDiscoveryResponseMessage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ServiceDiscoveryResponseMessage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ServiceDiscoveryResponseMessage_2eproto = nullptr;

const uint32_t TableStruct_ServiceDiscoveryResponseMessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::messages::ServiceDiscoveryResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::messages::ServiceDiscoveryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::messages::ServiceDiscoveryResponse, channels_),
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::messages::ServiceDiscoveryResponse, head_unit_name_),
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::messages::ServiceDiscoveryResponse, car_model_),
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::messages::ServiceDiscoveryResponse, car_year_),
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::messages::ServiceDiscoveryResponse, car_serial_),
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::messages::ServiceDiscoveryResponse, left_hand_drive_vehicle_),
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::messages::ServiceDiscoveryResponse, headunit_manufacturer_),
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::messages::ServiceDiscoveryResponse, headunit_model_),
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::messages::ServiceDiscoveryResponse, sw_build_),
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::messages::ServiceDiscoveryResponse, sw_version_),
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::messages::ServiceDiscoveryResponse, can_play_native_media_during_vr_),
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::messages::ServiceDiscoveryResponse, hide_clock_),
  ~0u,
  0,
  1,
  2,
  3,
  8,
  4,
  5,
  6,
  7,
  9,
  10,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, -1, sizeof(::f1x::aasdk::proto::messages::ServiceDiscoveryResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::f1x::aasdk::proto::messages::_ServiceDiscoveryResponse_default_instance_),
};

const char descriptor_table_protodef_ServiceDiscoveryResponseMessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%ServiceDiscoveryResponseMessage.proto\022"
  "\030f1x.aasdk.proto.messages\032\033ChannelDescri"
  "ptorData.proto\"\341\002\n\030ServiceDiscoveryRespo"
  "nse\0229\n\010channels\030\001 \003(\0132\'.f1x.aasdk.proto."
  "data.ChannelDescriptor\022\026\n\016head_unit_name"
  "\030\002 \002(\t\022\021\n\tcar_model\030\003 \002(\t\022\020\n\010car_year\030\004 "
  "\002(\t\022\022\n\ncar_serial\030\005 \002(\t\022\037\n\027left_hand_dri"
  "ve_vehicle\030\006 \002(\010\022\035\n\025headunit_manufacture"
  "r\030\007 \002(\t\022\026\n\016headunit_model\030\010 \002(\t\022\020\n\010sw_bu"
  "ild\030\t \002(\t\022\022\n\nsw_version\030\n \002(\t\022\'\n\037can_pla"
  "y_native_media_during_vr\030\013 \002(\010\022\022\n\nhide_c"
  "lock\030\014 \001(\010"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ServiceDiscoveryResponseMessage_2eproto_deps[1] = {
  &::descriptor_table_ChannelDescriptorData_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ServiceDiscoveryResponseMessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ServiceDiscoveryResponseMessage_2eproto = {
  false, false, 450, descriptor_table_protodef_ServiceDiscoveryResponseMessage_2eproto, "ServiceDiscoveryResponseMessage.proto", 
  &descriptor_table_ServiceDiscoveryResponseMessage_2eproto_once, descriptor_table_ServiceDiscoveryResponseMessage_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_ServiceDiscoveryResponseMessage_2eproto::offsets,
  file_level_metadata_ServiceDiscoveryResponseMessage_2eproto, file_level_enum_descriptors_ServiceDiscoveryResponseMessage_2eproto, file_level_service_descriptors_ServiceDiscoveryResponseMessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ServiceDiscoveryResponseMessage_2eproto_getter() {
  return &descriptor_table_ServiceDiscoveryResponseMessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ServiceDiscoveryResponseMessage_2eproto(&descriptor_table_ServiceDiscoveryResponseMessage_2eproto);
namespace f1x {
namespace aasdk {
namespace proto {
namespace messages {

// ===================================================================

class ServiceDiscoveryResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ServiceDiscoveryResponse>()._has_bits_);
  static void set_has_head_unit_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_car_model(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_car_year(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_car_serial(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_left_hand_drive_vehicle(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_headunit_manufacturer(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_headunit_model(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sw_build(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sw_version(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_can_play_native_media_during_vr(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_hide_clock(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000003ff) ^ 0x000003ff) != 0;
  }
};

void ServiceDiscoveryResponse::clear_channels() {
  channels_.Clear();
}
ServiceDiscoveryResponse::ServiceDiscoveryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  channels_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:f1x.aasdk.proto.messages.ServiceDiscoveryResponse)
}
ServiceDiscoveryResponse::ServiceDiscoveryResponse(const ServiceDiscoveryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  head_unit_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    head_unit_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_head_unit_name()) {
    head_unit_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_head_unit_name(), 
      GetArenaForAllocation());
  }
  car_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    car_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_car_model()) {
    car_model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_car_model(), 
      GetArenaForAllocation());
  }
  car_year_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    car_year_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_car_year()) {
    car_year_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_car_year(), 
      GetArenaForAllocation());
  }
  car_serial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    car_serial_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_car_serial()) {
    car_serial_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_car_serial(), 
      GetArenaForAllocation());
  }
  headunit_manufacturer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    headunit_manufacturer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_headunit_manufacturer()) {
    headunit_manufacturer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_headunit_manufacturer(), 
      GetArenaForAllocation());
  }
  headunit_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    headunit_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_headunit_model()) {
    headunit_model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_headunit_model(), 
      GetArenaForAllocation());
  }
  sw_build_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sw_build_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sw_build()) {
    sw_build_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sw_build(), 
      GetArenaForAllocation());
  }
  sw_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sw_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sw_version()) {
    sw_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sw_version(), 
      GetArenaForAllocation());
  }
  ::memcpy(&left_hand_drive_vehicle_, &from.left_hand_drive_vehicle_,
    static_cast<size_t>(reinterpret_cast<char*>(&hide_clock_) -
    reinterpret_cast<char*>(&left_hand_drive_vehicle_)) + sizeof(hide_clock_));
  // @@protoc_insertion_point(copy_constructor:f1x.aasdk.proto.messages.ServiceDiscoveryResponse)
}

inline void ServiceDiscoveryResponse::SharedCtor() {
head_unit_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  head_unit_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
car_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  car_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
car_year_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  car_year_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
car_serial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  car_serial_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
headunit_manufacturer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  headunit_manufacturer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
headunit_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  headunit_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sw_build_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sw_build_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sw_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sw_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&left_hand_drive_vehicle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hide_clock_) -
    reinterpret_cast<char*>(&left_hand_drive_vehicle_)) + sizeof(hide_clock_));
}

ServiceDiscoveryResponse::~ServiceDiscoveryResponse() {
  // @@protoc_insertion_point(destructor:f1x.aasdk.proto.messages.ServiceDiscoveryResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServiceDiscoveryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  head_unit_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  car_model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  car_year_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  car_serial_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headunit_manufacturer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headunit_model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sw_build_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sw_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServiceDiscoveryResponse::ArenaDtor(void* object) {
  ServiceDiscoveryResponse* _this = reinterpret_cast< ServiceDiscoveryResponse* >(object);
  (void)_this;
}
void ServiceDiscoveryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServiceDiscoveryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServiceDiscoveryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:f1x.aasdk.proto.messages.ServiceDiscoveryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      head_unit_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      car_model_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      car_year_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      car_serial_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      headunit_manufacturer_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      headunit_model_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      sw_build_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      sw_version_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&left_hand_drive_vehicle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hide_clock_) -
      reinterpret_cast<char*>(&left_hand_drive_vehicle_)) + sizeof(hide_clock_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceDiscoveryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .f1x.aasdk.proto.data.ChannelDescriptor channels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required string head_unit_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_head_unit_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "f1x.aasdk.proto.messages.ServiceDiscoveryResponse.head_unit_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string car_model = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_car_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_model");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string car_year = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_car_year();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_year");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string car_serial = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_car_serial();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_serial");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool left_hand_drive_vehicle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_left_hand_drive_vehicle(&has_bits);
          left_hand_drive_vehicle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string headunit_manufacturer = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_headunit_manufacturer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "f1x.aasdk.proto.messages.ServiceDiscoveryResponse.headunit_manufacturer");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string headunit_model = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_headunit_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "f1x.aasdk.proto.messages.ServiceDiscoveryResponse.headunit_model");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string sw_build = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_sw_build();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "f1x.aasdk.proto.messages.ServiceDiscoveryResponse.sw_build");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string sw_version = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_sw_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "f1x.aasdk.proto.messages.ServiceDiscoveryResponse.sw_version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool can_play_native_media_during_vr = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_can_play_native_media_during_vr(&has_bits);
          can_play_native_media_during_vr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hide_clock = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_hide_clock(&has_bits);
          hide_clock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceDiscoveryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:f1x.aasdk.proto.messages.ServiceDiscoveryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .f1x.aasdk.proto.data.ChannelDescriptor channels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_channels(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // required string head_unit_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_head_unit_name().data(), static_cast<int>(this->_internal_head_unit_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "f1x.aasdk.proto.messages.ServiceDiscoveryResponse.head_unit_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_head_unit_name(), target);
  }

  // required string car_model = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_car_model().data(), static_cast<int>(this->_internal_car_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_model");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_car_model(), target);
  }

  // required string car_year = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_car_year().data(), static_cast<int>(this->_internal_car_year().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_year");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_car_year(), target);
  }

  // required string car_serial = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_car_serial().data(), static_cast<int>(this->_internal_car_serial().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_serial");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_car_serial(), target);
  }

  // required bool left_hand_drive_vehicle = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_left_hand_drive_vehicle(), target);
  }

  // required string headunit_manufacturer = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_headunit_manufacturer().data(), static_cast<int>(this->_internal_headunit_manufacturer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "f1x.aasdk.proto.messages.ServiceDiscoveryResponse.headunit_manufacturer");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_headunit_manufacturer(), target);
  }

  // required string headunit_model = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_headunit_model().data(), static_cast<int>(this->_internal_headunit_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "f1x.aasdk.proto.messages.ServiceDiscoveryResponse.headunit_model");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_headunit_model(), target);
  }

  // required string sw_build = 9;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sw_build().data(), static_cast<int>(this->_internal_sw_build().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "f1x.aasdk.proto.messages.ServiceDiscoveryResponse.sw_build");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_sw_build(), target);
  }

  // required string sw_version = 10;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sw_version().data(), static_cast<int>(this->_internal_sw_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "f1x.aasdk.proto.messages.ServiceDiscoveryResponse.sw_version");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_sw_version(), target);
  }

  // required bool can_play_native_media_during_vr = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_can_play_native_media_during_vr(), target);
  }

  // optional bool hide_clock = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_hide_clock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:f1x.aasdk.proto.messages.ServiceDiscoveryResponse)
  return target;
}

size_t ServiceDiscoveryResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:f1x.aasdk.proto.messages.ServiceDiscoveryResponse)
  size_t total_size = 0;

  if (_internal_has_head_unit_name()) {
    // required string head_unit_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_head_unit_name());
  }

  if (_internal_has_car_model()) {
    // required string car_model = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_car_model());
  }

  if (_internal_has_car_year()) {
    // required string car_year = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_car_year());
  }

  if (_internal_has_car_serial()) {
    // required string car_serial = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_car_serial());
  }

  if (_internal_has_headunit_manufacturer()) {
    // required string headunit_manufacturer = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_headunit_manufacturer());
  }

  if (_internal_has_headunit_model()) {
    // required string headunit_model = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_headunit_model());
  }

  if (_internal_has_sw_build()) {
    // required string sw_build = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sw_build());
  }

  if (_internal_has_sw_version()) {
    // required string sw_version = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sw_version());
  }

  if (_internal_has_left_hand_drive_vehicle()) {
    // required bool left_hand_drive_vehicle = 6;
    total_size += 1 + 1;
  }

  if (_internal_has_can_play_native_media_during_vr()) {
    // required bool can_play_native_media_during_vr = 11;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ServiceDiscoveryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:f1x.aasdk.proto.messages.ServiceDiscoveryResponse)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required string head_unit_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_head_unit_name());

    // required string car_model = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_car_model());

    // required string car_year = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_car_year());

    // required string car_serial = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_car_serial());

    // required string headunit_manufacturer = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_headunit_manufacturer());

    // required string headunit_model = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_headunit_model());

    // required string sw_build = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sw_build());

    // required string sw_version = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sw_version());

    // required bool left_hand_drive_vehicle = 6;
    total_size += 1 + 1;

    // required bool can_play_native_media_during_vr = 11;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .f1x.aasdk.proto.data.ChannelDescriptor channels = 1;
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool hide_clock = 12;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000400u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceDiscoveryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServiceDiscoveryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceDiscoveryResponse::GetClassData() const { return &_class_data_; }

void ServiceDiscoveryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServiceDiscoveryResponse *>(to)->MergeFrom(
      static_cast<const ServiceDiscoveryResponse &>(from));
}


void ServiceDiscoveryResponse::MergeFrom(const ServiceDiscoveryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:f1x.aasdk.proto.messages.ServiceDiscoveryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_head_unit_name(from._internal_head_unit_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_car_model(from._internal_car_model());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_car_year(from._internal_car_year());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_car_serial(from._internal_car_serial());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_headunit_manufacturer(from._internal_headunit_manufacturer());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_headunit_model(from._internal_headunit_model());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_sw_build(from._internal_sw_build());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_sw_version(from._internal_sw_version());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      left_hand_drive_vehicle_ = from.left_hand_drive_vehicle_;
    }
    if (cached_has_bits & 0x00000200u) {
      can_play_native_media_during_vr_ = from.can_play_native_media_during_vr_;
    }
    if (cached_has_bits & 0x00000400u) {
      hide_clock_ = from.hide_clock_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceDiscoveryResponse::CopyFrom(const ServiceDiscoveryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:f1x.aasdk.proto.messages.ServiceDiscoveryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceDiscoveryResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(channels_))
    return false;
  return true;
}

void ServiceDiscoveryResponse::InternalSwap(ServiceDiscoveryResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  channels_.InternalSwap(&other->channels_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &head_unit_name_, lhs_arena,
      &other->head_unit_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &car_model_, lhs_arena,
      &other->car_model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &car_year_, lhs_arena,
      &other->car_year_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &car_serial_, lhs_arena,
      &other->car_serial_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &headunit_manufacturer_, lhs_arena,
      &other->headunit_manufacturer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &headunit_model_, lhs_arena,
      &other->headunit_model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sw_build_, lhs_arena,
      &other->sw_build_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sw_version_, lhs_arena,
      &other->sw_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServiceDiscoveryResponse, hide_clock_)
      + sizeof(ServiceDiscoveryResponse::hide_clock_)
      - PROTOBUF_FIELD_OFFSET(ServiceDiscoveryResponse, left_hand_drive_vehicle_)>(
          reinterpret_cast<char*>(&left_hand_drive_vehicle_),
          reinterpret_cast<char*>(&other->left_hand_drive_vehicle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceDiscoveryResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ServiceDiscoveryResponseMessage_2eproto_getter, &descriptor_table_ServiceDiscoveryResponseMessage_2eproto_once,
      file_level_metadata_ServiceDiscoveryResponseMessage_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::f1x::aasdk::proto::messages::ServiceDiscoveryResponse* Arena::CreateMaybeMessage< ::f1x::aasdk::proto::messages::ServiceDiscoveryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::f1x::aasdk::proto::messages::ServiceDiscoveryResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
