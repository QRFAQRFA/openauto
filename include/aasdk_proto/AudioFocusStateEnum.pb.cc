// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AudioFocusStateEnum.proto

#include "AudioFocusStateEnum.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace f1x {
namespace aasdk {
namespace proto {
namespace enums {
constexpr AudioFocusState::AudioFocusState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AudioFocusStateDefaultTypeInternal {
  constexpr AudioFocusStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AudioFocusStateDefaultTypeInternal() {}
  union {
    AudioFocusState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AudioFocusStateDefaultTypeInternal _AudioFocusState_default_instance_;
}  // namespace enums
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_AudioFocusStateEnum_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_AudioFocusStateEnum_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_AudioFocusStateEnum_2eproto = nullptr;

const uint32_t TableStruct_AudioFocusStateEnum_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::enums::AudioFocusState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::f1x::aasdk::proto::enums::AudioFocusState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::f1x::aasdk::proto::enums::_AudioFocusState_default_instance_),
};

const char descriptor_table_protodef_AudioFocusStateEnum_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031AudioFocusStateEnum.proto\022\025f1x.aasdk.p"
  "roto.enums\"\264\001\n\017AudioFocusState\"\240\001\n\004Enum\022"
  "\010\n\004NONE\020\000\022\010\n\004GAIN\020\001\022\022\n\016GAIN_TRANSIENT\020\002\022"
  "\010\n\004LOSS\020\003\022\033\n\027LOSS_TRANSIENT_CAN_DUCK\020\004\022\022"
  "\n\016LOSS_TRANSIENT\020\005\022\023\n\017GAIN_MEDIA_ONLY\020\006\022"
  " \n\034GAIN_TRANSIENT_GUIDANCE_ONLY\020\007"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_AudioFocusStateEnum_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AudioFocusStateEnum_2eproto = {
  false, false, 233, descriptor_table_protodef_AudioFocusStateEnum_2eproto, "AudioFocusStateEnum.proto", 
  &descriptor_table_AudioFocusStateEnum_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_AudioFocusStateEnum_2eproto::offsets,
  file_level_metadata_AudioFocusStateEnum_2eproto, file_level_enum_descriptors_AudioFocusStateEnum_2eproto, file_level_service_descriptors_AudioFocusStateEnum_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_AudioFocusStateEnum_2eproto_getter() {
  return &descriptor_table_AudioFocusStateEnum_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_AudioFocusStateEnum_2eproto(&descriptor_table_AudioFocusStateEnum_2eproto);
namespace f1x {
namespace aasdk {
namespace proto {
namespace enums {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AudioFocusState_Enum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_AudioFocusStateEnum_2eproto);
  return file_level_enum_descriptors_AudioFocusStateEnum_2eproto[0];
}
bool AudioFocusState_Enum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AudioFocusState_Enum AudioFocusState::NONE;
constexpr AudioFocusState_Enum AudioFocusState::GAIN;
constexpr AudioFocusState_Enum AudioFocusState::GAIN_TRANSIENT;
constexpr AudioFocusState_Enum AudioFocusState::LOSS;
constexpr AudioFocusState_Enum AudioFocusState::LOSS_TRANSIENT_CAN_DUCK;
constexpr AudioFocusState_Enum AudioFocusState::LOSS_TRANSIENT;
constexpr AudioFocusState_Enum AudioFocusState::GAIN_MEDIA_ONLY;
constexpr AudioFocusState_Enum AudioFocusState::GAIN_TRANSIENT_GUIDANCE_ONLY;
constexpr AudioFocusState_Enum AudioFocusState::Enum_MIN;
constexpr AudioFocusState_Enum AudioFocusState::Enum_MAX;
constexpr int AudioFocusState::Enum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class AudioFocusState::_Internal {
 public:
};

AudioFocusState::AudioFocusState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:f1x.aasdk.proto.enums.AudioFocusState)
}
AudioFocusState::AudioFocusState(const AudioFocusState& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:f1x.aasdk.proto.enums.AudioFocusState)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AudioFocusState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AudioFocusState::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AudioFocusState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_AudioFocusStateEnum_2eproto_getter, &descriptor_table_AudioFocusStateEnum_2eproto_once,
      file_level_metadata_AudioFocusStateEnum_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace enums
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::f1x::aasdk::proto::enums::AudioFocusState* Arena::CreateMaybeMessage< ::f1x::aasdk::proto::enums::AudioFocusState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::f1x::aasdk::proto::enums::AudioFocusState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
